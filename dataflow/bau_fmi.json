{
	"name": "bau_fmi",
	"properties": {
		"folder": {
			"name": "NorthernRe/Financial Model Inputs"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "nore_fmi_json_bom",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "nore_fmi_parquet",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     queryDate as string ('2025-05-30T20:58:24.2277449Z')",
				"}",
				"source(output(",
				"          statement_id as string,",
				"          status as (state as string),",
				"          manifest as (format as string, schema as (column_count as integer, columns as (name as string, type_text as string, type_name as string, position as integer)[]), total_chunk_count as integer, chunks as (chunk_index as integer, row_offset as integer, row_count as integer)[], total_row_count as integer, truncated as boolean),",
				"          result as (chunk_index as integer, row_offset as integer, row_count as integer, data_array as string[][])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: ['inbox','bronze/northernre/treefrog_snapshots'],",
				"     documentForm: 'singleDocument') ~> source1",
				"source1 foldDown(unroll(result.data_array),",
				"     mapColumn(",
				"          statement_id,",
				"          status = status.state,",
				"          rows = result.data_array",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(nre_feed = rows[1],",
				"          bordereaux_month = toDate(rows[2],\"M/d/yy\"),",
				"          treaty_year = toInteger(rows[3]),",
				"          tf_assumed_paid_ulae = toDecimal(replace(rows[4], ',', ''), 28, 2),",
				"          tf_assumed_paid_alae = toDecimal(replace(rows[5], ',', ''), 28, 2),",
				"          tf_assumed_collected_premium = toDecimal(replace(rows[6], ',', ''), 28, 2),",
				"          tf_assumed_earned_premium = toDecimal(replace(rows[7], ',', ''), 28, 2),",
				"          tf_assumed_gross_written_premium = toDecimal(replace(rows[8], ',', ''), 28, 2),",
				"          tf_assumed_paid_losses = toDecimal(replace(rows[9], ',', ''), 28, 2),",
				"          tf_assumed_expected_losses = toDecimal(replace(rows[10], ',', ''), 28, 2),",
				"          tf_assumed_ss = toDecimal(replace(rows[11], ',', ''), 28, 2),",
				"          v_created = toDate(rows[12]),",
				"          FileName = concat('/bronze/northernre/treefrog_snapshots/', rows[1], '/', rows[3], '/', $queryDate, '.parquet'),",
				"          query_date = toTimestamp($queryDate)) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(nre_feed,",
				"          treaty_year,",
				"          bordereaux_month),",
				"     row_count = count()) ~> aggregate1",
				"aggregate1 filter(row_count > 1) ~> filter1",
				"filter1 assert(expectTrue(isNull(row_count), false, 'uniqueKeys'),",
				"     abort: true) ~> assert1",
				"derivedColumn1, assert1 join(derivedColumn1@nre_feed == aggregate1@nre_feed",
				"     && derivedColumn1@treaty_year == aggregate1@treaty_year",
				"     && derivedColumn1@bordereaux_month == aggregate1@bordereaux_month,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          statement_id,",
				"          status,",
				"          rows,",
				"          nre_feed = derivedColumn1@nre_feed,",
				"          bordereaux_month = derivedColumn1@bordereaux_month,",
				"          treaty_year = derivedColumn1@treaty_year,",
				"          tf_assumed_paid_ulae,",
				"          tf_assumed_paid_alae,",
				"          tf_assumed_collected_premium,",
				"          tf_assumed_earned_premium,",
				"          tf_assumed_gross_written_premium,",
				"          tf_assumed_paid_losses,",
				"          tf_assumed_expected_losses,",
				"          tf_assumed_ss,",
				"          v_created,",
				"          FileName,",
				"          query_date,",
				"          row_count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          nre_feed as string,",
				"          treaty_year as integer,",
				"          v_created as date,",
				"          query_date as timestamp,",
				"          bordereaux_month as date,",
				"          tf_assumed_gross_written_premium as decimal(10,2),",
				"          tf_assumed_earned_premium as decimal(10,2),",
				"          tf_assumed_paid_losses as decimal(10,2),",
				"          tf_assumed_expected_losses as decimal(10,2),",
				"          tf_assumed_collected_premium as decimal(10,2),",
				"          tf_assumed_ss as decimal(10,2),",
				"          tf_assumed_paid_alae as decimal(10,2),",
				"          tf_assumed_paid_ulae as decimal(10,2)",
				"     ),",
				"     format: 'parquet',",
				"     rowUrlColumn:'FileName',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          nre_feed,",
				"          treaty_year,",
				"          v_created,",
				"          query_date,",
				"          bordereaux_month,",
				"          tf_assumed_gross_written_premium,",
				"          tf_assumed_earned_premium,",
				"          tf_assumed_paid_losses,",
				"          tf_assumed_expected_losses,",
				"          tf_assumed_collected_premium,",
				"          tf_assumed_ss,",
				"          tf_assumed_paid_alae,",
				"          tf_assumed_paid_ulae",
				"     )) ~> sink1"
			]
		}
	}
}